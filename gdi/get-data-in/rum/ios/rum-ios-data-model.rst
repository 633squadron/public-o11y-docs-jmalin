.. _rum-ios-data:

***********************************
iOS RUM data model 
***********************************

.. meta::
   :description: Understand which RUM data you collect from iOS applications when using Splunk Real User Monitoring (RUM).

The iOS RUM agent includes a package that collects the following types of data about your iOS application.

Common data types
==============================================

.. include:: /_includes/rum-data-model.rst

.. _ios-rum-basic-properties:

Basic properties
===================

.. include:: /_includes/rum-basic-properties.rst

Default attributes
===================

By default, the iOS RUM agent adds the following attributes to all spans:

.. list-table:: 
   :widths: 20 10 70
   :header-rows: 1

   * - Name
     - Type
     - Description
   * - ``app``
     - String
     - Application name, as defined using :code:`applicationName(String)`.
   * - ``splunk.rumSessionId``
     - String
     - Session identifier, randomly generated by Splunk RUM. It doesn't contain personally identifiable information.
   * - ``splunk.rum.previous_session_id``
     - String
     - Identifier of the session preceding the current session. Set only if there is a change in the ``splunk.rumSessionId`` attribute.
   * - ``splunk.rum.version``
     - String
     - Version of the Splunk RUM SDK instrumenting the application.
   * - ``screen.name``
     - String
     - Name of the screen or fragment from which the span is generated. To customize the screen name, see :ref:`android-rum-customize-screen-names`.
   * - ``last.screen.name``
     - String
     - Name of the screen or fragment preceding the current screen. Set only if there is a change in the active ``screen.name`` attribute.
   * - ``net.host.connection.type``
     - String
     - Connection type used by the device. Possible values include ``wifi``, ``cell``, ``unavailable``, and ``unknown``.
   * - ``net.host.connection.subtype``
     - String
     - Details of the connection. For example, the type of ``cell`` connection, like ``gprs``, ``edge``, or ``umts``.

Resource attributes
==============================================

By default, the iOS RUM agent adds the following resource attributes to all spans:

.. list-table:: 
   :widths: 20 10 70
   :header-rows: 1

   * - Name
     - Type
     - Description
   * - ``deployment.environment``
     - String
     - Name of the deployment environment. For example, ``dev``. Defined using :code:`deploymentEnvironment(String)`.
   * - ``device.model.identifier``
     - String
     - The model identifier for the device.
   * - ``device.model.name``
     - String
     - The model name for the device.
   * - ``os.name``
     - String
     - Always set to ``iOS``.
   * - ``os.type``
     - String
     - Always set to ``iOS``.
   * - ``os.version``
     - String
     - Version of the operating system.

Instrumentation attributes
==============================================

The iOS RUM agent collects the following data using its instrumentations. To enable or disable specific instrumentations, see :ref:`ios-rum-instrumentation-settings`.

Crash reporting
----------------------------------------------------

The Android RUM agent adds the following crash reporting attributes to spans that represent uncaught exceptions:

.. list-table:: 
   :widths: 20 10 70
   :header-rows: 1

   * - Name
     - Type
     - Description
   * - ``thread.id``
     - Integer
     - ID of the current managed thread, as opposed to the operating system thread ID.
   * - ``thread.name``
     - String
     - Name of the thread.
   * - ``exception.message``
     - String
     - The message of the exception.
   * - ``exception.type``
     - String
     - The type of the exception.
   * - ``exception.stacktrace``
     - String
     - The stack trace for the exception.
   * - ``exception.escaped``
     - String
     - Always ``true``, denoting the uncaught exception, such as a crash occurring.
   * - ``component``
     - String
     - Always ``crash``.
   * - ``status``
     - String
     - Always ``Error``.

Network monitoring
----------------------------------------------------

Network monitoring produces spans with the name ``network.change`` and the following attributes:

.. list-table:: 
   :widths: 20 10 70
   :header-rows: 1

   * - Name
     - Type
     - Description
   * - ``network.status``
     - String
     - Network status. Either ``lost`` or ``available``.
   * - ``net.host.connection.type``
     - String
     - Internet connection type. Possible values are: ``unavailable``, ``cell``, ``wifi``, ``unknown``, ``vpn``.
   * - ``net.host.connection.subtype``
     - String
     - Detailed information about the connection type. For example, the type of ``cell`` connection, like ``GSM`` or ``LTE``.

Slow rendering detection
----------------------------------------------------

Slow rendering detection generates spans whenever it detects a slow or frozen frame render. Frame rendering is slow if its duration exceeds 16 milliseconds, and frozen if it exceeds 700 milliseconds.

Slow rendering detection generates up to two spans on every interval: a span named ``slowRenders`` which counts slow frames, and a span named ``frozenRenders`` which counts frozen frames.

Slow rendering detection spans have the following attribute:

.. list-table:: 
   :widths: 20 10 70
   :header-rows: 1

   * - Name
     - Type
     - Description
   * - ``count``
     - Integer
     - Number of observed slow or frozen frames during a single interval. Intervals last 1 second by default. To change the polling interval duration, pass a positive duration, in milliseconds, to the  :code:`slowRenderingDetectionPollInterval(Duration)` setting.

HTTP clients
------------------------------------

The Android RUM agent includes instrumentation for the OkHttp and Volley HTTP clients. To enable the instrumentation, see :ref:`android-rum-http-client-settings`.

The HTTP client instrumentation collects the following OpenTelemetry HTTP attributes:

.. list-table:: 
   :widths: 20 10 70
   :header-rows: 1

   * - Name
     - Type
     - Examples
   * - ``http.method``
     - String
     - ``GET``, ``POST``, ``HEAD``
   * - ``http.url``
     - String
     - ``https://foo.bar/address?q=value#hash``
   * - ``http.flavor``
     - String
     - ``1.0``
   * - ``http.status_code``
     - Integer
     - ``200``, ``404``, ``418``
   * - ``http.response_content_length``
     - Integer
     - ``3495`` (bytes)
   * - ``http.user_agent``
     - String
     - ``CERN-LineMode/2.15 libwww/2.17b3``
   * - ``net.transport``
     - String
     - ``IP.TCP``
   * - ``net.peer.name``
     - String
     - ``example.com``
   * - ``net.peer.port``
     - Integer
     - ``80``, ``8080``, ``443``

The HTTP instrumentation also collects the following attributes:

.. list-table:: 
   :widths: 20 10 70
   :header-rows: 1

   * - Name
     - Type
     - Description
   * - ``component``
     - String
     - Always ``http``.
   * - ``link.traceId``
     - String
     - The trace ID of the corresponding backend (APM) span, extracted from the ``Server-Timing`` header. See :ref:`integrate-android-apm-traces` for more information.
   * - ``link.spanId``
     - String
     - The span ID of the corresponding backend (APM) span, extracted from the ``Server-Timing`` header. See :ref:`integrate-android-apm-traces` for more information.

Fragment lifecycle monitoring
------------------------------------

Fragment lifecycle monitoring generates spans whenever a fragment changes its state. A fragment lifecycle span can have one the following names depending on its state:

- ``Created``: Before the fragment gets attached to the Android context.
- ``Restored``: Fragment recreates its view.
- ``Resumed``: Fragment is resumed after a pause.
- ``Paused``: Fragment is paused.
- ``ViewDestroyed``: The view of the fragment is destroyed
- ``Destroyed``: Fragment is destroyed.
- ``Detached``: Fragment is detached from the Android context.

Fragment lifecycle spans contain the following attributes:

.. list-table:: 
   :widths: 20 10 70
   :header-rows: 1
   :width: 100%

   * - Name
     - Type
     - Description
   * - ``component``
     - String
     - Always ``ui``.
   * - ``fragmentName``
     - String
     - Name of the fragment class.

App start monitoring
------------------------------------

App start monitoring feature generates spans whenever the app performs a cold, warm, or hot start.

App start monitoring produces spans with the name ``AppStart`` and the following attributes:

.. list-table:: 
   :widths: 20 10 70
   :header-rows: 1
   :width: 100%
   
   * - Name
     - Type
     - Description
   * - ``component``
     - String
     - Always ``appstart``.
   * - ``start.type``
     - String
     - The type of start. Can be ``cold``, ``warm``, or ``hot``.

Location data  
=============

If you choose to set the latitude and longitude for location data by using the Splunk RUM for iOS APIs, then Splunk Observability Cloud uses the information to map the geographical location of the user, such as country, city, and so on.

.. note::
   Splunk Observability Cloud calculates geographical metadata from the latitude and longitude, and then drops the latitude and longitude after processing the data. 

